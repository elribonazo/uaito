name: Release
permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  release:
    runs-on: macos-latest

    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org/'
          cache: 'npm'

      - name: Enable Corepack and set up Yarn
        run: |
          corepack enable
          yarn --version

      - name: Configure npm authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ./.npmrc

        env:
          NPM_TOKEN: ${{ env.NPM_TOKEN }}

      - name: Run Build package
        env:
          NPM_TOKEN: ${{ env.NPM_TOKEN }}
          GIT_AUTHOR_EMAIL: 'elribonazo@gmail.com'
          GIT_COMMITTER_EMAIL: 'elribonazo@gmail.com'
          GIT_AUTHOR_NAME: 'elribonazo'
          GIT_COMMITTER_NAME: 'elribonazo'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          yarn install
          npm run build
          if [[ $GITHUB_REF == *"refs/heads/develop"* ]]; then
            echo "Creating RC version and changelog for develop branch"
            npx nx release prerelease --preid=rc --skip-publish --verbose
            echo "Publishing with RC tag for develop branch"
            npx nx release publish --tag rc --verbose
          else
            echo "Creating release version for main branch"
            # Determine version bump from conventional commits
            # When graduating from prerelease, we need to extract the version type
            # and apply it explicitly (patch/minor/major) to avoid continuing with RC versions
            
            # Try to determine if there are any breaking changes or features
            if git log --format=%B HEAD~5..HEAD | grep -q "^feat!\\|BREAKING CHANGE"; then
              VERSION_TYPE="major"
            elif git log --format=%B HEAD~5..HEAD | grep -q "^feat"; then
              VERSION_TYPE="minor"
            else
              VERSION_TYPE="patch"
            fi
            
            echo "Detected version type: $VERSION_TYPE"
            npx nx release version $VERSION_TYPE --verbose
            npx nx release changelog --verbose
            echo "Publishing with latest tag for main branch"
            npx nx release publish --verbose
          fi

      